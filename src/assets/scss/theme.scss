html[data-theme="dark"] {
  // --text-color: #fff;
  // --bg1: #102128;
  // --bg2: #2d5567;
  --bgColor: #11161a;
  --bgColor1: #191d21;
  --bgColor2: #202529;
  --textColor: #c1c1c1;
  --gray: #fff;
  --gray1: rgba(255, 255, 255, 0.08);
  --gray2: rgba(255, 255, 255, 0.12);
  --gray3: rgba(255, 255, 255, 0.72);
}
:root {
  // --text-color: #333;
  // --bg1: #c7ffdd;
  // --bg2: #fbd988;
  --bgColor: #f4f2ec; // 主题色
  --bgColor1: #fff; // 主题色
  --bgColor2: #f6f6f6; // 主题色
  --textColor: #4f5962; // 主字体色
  --gray: #0b1926;
  --gray1: rgba(11, 25, 38, 0.08);
  --gray2: rgba(11, 25, 38, 0.12);
  --gray3: rgba(11, 25, 38, 0.72);
}

/**
 * 使用scss实现主题切换
*/
/* 
$themeMap: (); // 定义一个全局变量存储当前的主题对象

// map结构
$themes: (
  light: (
    textColor: #333,
    bgColor: #fff,
  ),
  dark: (
    textColor: #fff,
    bgColor: #333,
  ),
);

@mixin useTheme() {
  // @each 使用循环获取map中的数据
  @each $key, $value in $themes {
    $themeMap: $value !global; // global 是将他定义成全局变量
    // 接收传递的数据，@content 是一个占位符,用于在混合宏中插入内容,
    // & 表示当前选择器 item
    // 使用时需要在{$key} 前面加井号键，类似模板字符串
    html[data-theme="{$key}"] & {
      @content;
    }
  }
}
@function getVar($paramName) {
  @return map-get($themeMap, $paramName); // 返回当前主题的值
}

.item {
  font-size: 14px;
  @include useTheme {
    color: getVar("textColor");
    background: getVar("bgColor");
  }
}
 */
